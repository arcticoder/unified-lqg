# Exotic Matter Energy Density - AsciiMath Format
#
# This file contains the stress-energy tensor T^{00}(r,t) component 
# for Alcubierre-type warp drive spacetimes in AsciiMath notation.
#
# FULL TIME-DEPENDENT VERSION:
[ T00_full(r,t) = (
    2*r*(f(r,t) - 1)^3 * d2f_dt2(r,t) 
    + r*(f(r,t) - 1)^2 * (df_dt(r,t))^2 
    - 2*r*(f(r,t) - 1) * d2f_dt2(r,t) 
    - r*(df_dt(r,t))^2 
    + 4*(f(r,t) - 1)^3 * (-2*f(r,t) - df_dr(r,t) + 2) 
    - 4*(f(r,t) - 1)^2 * df_dr(r,t)
  ) / (64*pi*r*(f(r,t) - 1)^4) ]

# STATIC VERSION (df_dt = 0, d2f_dt2 = 0):
# This is the version currently used in compute_negative_energy.py
[ T00_static(r) = (
    4*(f(r) - 1)^3 * (-2*f(r) - df_dr(r) + 2) 
    - 4*(f(r) - 1)^2 * df_dr(r)
  ) / (64*pi*r*(f(r) - 1)^4) ]

# ALCUBIERRE WARP FUNCTION:
# f(r) = (1/2) * (tanh(sigma*(r - rs)) + 1)
# where sigma = 2/b0, rs = 3*b0
# df_dr(r) = (sigma/2) * sech(sigma*(r - rs))^2
[ f_alcubierre(r, b0) = (1/2) * (tanh((2/b0)*(r - 3*b0)) + 1) ]
[ df_dr_alcubierre(r, b0) = (1/b0) * sech((2/b0)*(r - 3*b0))^2 ]

# REGULARIZED VERSION (to avoid f -> 1 singularities):
# Add small epsilon to denominator: (f-1)^4 -> (f-1)^4 + epsilon
[ T00_regularized(r, eps) = (
    4*(f(r) - 1)^3 * (-2*f(r) - df_dr(r) + 2) 
    - 4*(f(r) - 1)^2 * df_dr(r)
  ) / (64*pi*r*((f(r) - 1)^4 + eps)) ]
